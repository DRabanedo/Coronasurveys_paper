runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
install.packages("shinythemes")
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
gen.ard = function(g){
list_colors = c('blue', 'yellow', 'green', 'red')
# g is a colored graph
df = data.frame(node = as.numeric(V(g)),color= V(g)$color)
df$degree = degree(g)
for (i in list_colors) {
column = sapply(as.numeric(V(g)), FUN= function(x) df[as.numeric(neighborhood(g,node=x)[[1]])[-1],] %>% filter(color==i) %>% count() )
df$column = as.numeric(column)
colnames(df)[ncol(df)]= paste0('ard',i)
}
df = df %>% select(-node)
return(df)
}
library(igraph)
library(dplyr)
library(data.table)
g = sample_smallworld(dim=1, size =  100, nei = 5, p = 0.1, loops = FALSE, multiple = FALSE)
V(g)$color = sample(c("blue","yellow","green","red"),length(g),prob = c(0.5,0.2,0.1,0.1),replace = TRUE)
plot(g, vertex.color = V(g)$color,vertex.label = NA,vertex.size =2)
gen.ard = function(g){
list_colors = c('blue', 'yellow', 'green', 'red')
# g is a colored graph
df = data.frame(node = as.numeric(V(g)),color= V(g)$color)
df$degree = degree(g)
for (i in list_colors) {
column = sapply(as.numeric(V(g)), FUN= function(x) df[as.numeric(neighborhood(g,node=x)[[1]])[-1],] %>% filter(color==i) %>% count() )
df$column = as.numeric(column)
colnames(df)[ncol(df)]= paste0('ard',i)
}
df = df %>% select(-node)
return(df)
}
gen.ard(g)
df = gen.ard(g)
colSums(df)
colSums(df,dims = 1)
df
colSums(df)
colSums(df[,-1])
as.numeric(dg$ard.red/dg$degree)
as.numeric(df$ard.red/df$degree)
dg = colSums(df[,-1])
as.numeric(dg$ard.red/dg$degree)
dg$
a
dg
dg[["ardblue"]]
dg$ardblue
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
dg
dg[[ardred]]
dg[[blue]]
df
colSums(df$ardred)
colSums(df[["ardred"]])
runApp('IFEMA/prueba7')
shiny::runApp('IFEMA/prueba7')
gen.ard = function(g,sa){
list_colors = c('blue', 'yellow', 'green', 'red')
# g is a colored graph
df = data.frame(node = as.numeric(V(g)),color= V(g)$color)
df$degree = degree(g)
df = df[sa,]
for (i in list_colors) {
column = sapply(as.numeric(V(g)), FUN= function(x) df[as.numeric(neighborhood(g,node=x)[[1]])[-1],] %>% filter(color==i) %>% count() )
df$column = as.numeric(column)
colnames(df)[ncol(df)]= paste0('ard',i)
}
df = df %>% select(-node)
return(df)
}
g = sample_smallworld(dim=1, size =  100, nei = 5, p = 0.1, loops = FALSE, multiple = FALSE)
V(g)$color = sample(c("blue","yellow","green","red"),length(g),prob = c(0.5,0.2,0.1,0.1),replace = TRUE)
plot(g, vertex.color = V(g)$color,vertex.label = NA,vertex.size =2)
gen.ard(g,c(1,2,3))
runApp('IFEMA/prueba7')
gen.ard = function(g){
list_colors = c('blue', 'yellow', 'green', 'red')
# g is a colored graph
df = data.frame(node = as.numeric(V(g)),color= V(g)$color)
df$degree = degree(g)
for (i in list_colors) {
column = sapply(as.numeric(V(g)), FUN= function(x) df[as.numeric(neighborhood(g,node=x)[[1]])[-1],] %>% filter(color==i) %>% count() )
df$column = as.numeric(column)
colnames(df)[ncol(df)]= paste0('ard',i)
}
df = df %>% select(-node)
return(df)
}
gen.ard(g)
gen.ard = function(g,sa){
list_colors = c('blue', 'yellow', 'green', 'red')
# g is a colored graph
df = data.frame(node = as.numeric(V(g)),color= V(g)$color)
df$degree = degree(g)
for (i in list_colors) {
column = sapply(sa, FUN= function(x) df[as.numeric(neighborhood(g,node=x)[[1]])[-1],] %>% filter(color==i) %>% count() )
df$column = as.numeric(column)
colnames(df)[ncol(df)]= paste0('ard',i)
}
df = df %>% select(-node)
return(df)
}
gen.ard(g,c(1,2,3,4,5))
gen.ard = function(g,sa){
list_colors = c('blue', 'yellow', 'green', 'red')
# g is a colored graph
df = data.frame(node = as.numeric(V(g)),color= V(g)$color)
df$degree = degree(g)
for (i in list_colors) {
column = sapply(sa, FUN= function(x) df[as.numeric(neighborhood(g,node=x)[[1]])[-1],] %>% filter(color==i) %>% count() )
df$column = as.numeric(column)
colnames(df)[ncol(df)]= paste0('ard',i)
}
df = df %>% select(-node)
return(df)
}
gen.ard(g,c(1,2,3,4,5))
list_colors = c('blue', 'yellow', 'green', 'red')
# g is a colored graph
df = data.frame(node = as.numeric(V(g)),color= V(g)$color)
df$degree = degree(g)
df
i = 'red'
column = sapply(sa, FUN= function(x) df[as.numeric(neighborhood(g,node=x)[[1]])[-1],] %>% filter(color==i) %>% count() )
sa = c(1,2,3,4)
column = sapply(sa, FUN= function(x) df[as.numeric(neighborhood(g,node=x)[[1]])[-1],] %>% filter(color==i) %>% count() )
column
df$column = as.numeric(column)
colnames(df)[ncol(df)]= paste0('ard',i)
for (i in list_colors) {
column = sapply(sa, FUN= function(x) df[as.numeric(neighborhood(g,node=x)[[1]])[-1],] %>% filter(color==i) %>% count() )
df$column = as.numeric(column)
colnames(df)[ncol(df)]= paste0('ard',i)
}
df
gen.ard = function(g,sa){
list_colors = c('blue', 'yellow', 'green', 'red')
# g is a colored graph
df = data.frame(node = sa,color= V(g)$color[sa])
df$degree = degree(g)[sa]
for (i in list_colors) {
column = sapply(sa, FUN= function(x) df[as.numeric(neighborhood(g,node=x)[[1]])[-1],] %>% filter(color==i) %>% count() )
df$column = as.numeric(column)
colnames(df)[ncol(df)]= paste0('ard',i)
}
df = df %>% select(-node)
return(df)
}
gen.ard(g,c(1,2,3,4,5))
V(g)
V(g)[c(1,2,3)]
gen.ard = function(g,sa){
list_colors = c('blue', 'yellow', 'green', 'red')
# g is a colored graph
df = data.frame(node = as.numeric(V(g)),color= V(g)$color)
df$degree = degree(g)
dg = data.frame(node = sa, color = V(g)$color[sa])
for (i in list_colors) {
column = sapply(sa, FUN= function(x) df[as.numeric(neighborhood(g,node=x)[[1]])[-1],] %>% filter(color==i) %>% count() )
dg$column = as.numeric(column)
colnames(dg)[ncol(df)]= paste0('ard',i)
}
dg = dg %>% select(-node)
return(dg)
}
gen.ard(g,c(1,2,4,6))
gen.ard = function(g,sa){
list_colors = c('blue', 'yellow', 'green', 'red')
# g is a colored graph
df = data.frame(node = as.numeric(V(g)),color= V(g)$color)
df$degree = degree(g)
dg = data.frame(node = sa, color = V(g)$color[sa])
for (i in list_colors) {
column = sapply(sa, FUN= function(x) df[as.numeric(neighborhood(g,node=x)[[1]])[-1],] %>% filter(color==i) %>% count() )
dg$column = as.numeric(column)
colnames(dg)[ncol(dg)]= paste0('ard',i)
}
dg = dg %>% select(-node)
return(dg)
}
gen.ard(g,c(1,2,4,6))
gen.ard = function(g,sa){
list_colors = c('blue', 'yellow', 'green', 'red')
# g is a colored graph
df = data.frame(node = as.numeric(V(g)),color= V(g)$color)
df$degree = degree(g)
# sample data frame
dg = data.frame(node = sa, color = V(g)$color[sa])
dg$degree = degree(g)[sa]
for (i in list_colors) {
column = sapply(sa, FUN= function(x) df[as.numeric(neighborhood(g,node=x)[[1]])[-1],] %>% filter(color==i) %>% count() )
dg$column = as.numeric(column)
colnames(dg)[ncol(dg)]= paste0('ard',i)
}
dg = dg %>% select(-node)
return(dg)
}
gen.ard(g,c(1,2,4,6))
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
round(4.55555)
round(4.55,2)
round(4.555555555,2)
round(0.333333,2)
round(0.333333,3)
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
install.packages("shinyWidgets")
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/prueba7')
runApp('IFEMA/scienceFair')
runApp('IFEMA/scienceFair')
runApp('IFEMA/prueba7')
runApp('IFEMA/scienceFair')
runApp('IFEMA/scienceFair')
runApp('IFEMA/feriaCiencia')
shiny::runApp('IFEMA/feriaCiencia')
runApp('IFEMA/feriaCiencia')
shiny::runApp('IFEMA/feriaCiencia')
shiny::runApp('IFEMA/feriaCiencia')
shiny::runApp('IFEMA/prueba8')
library(igraph)
g = sample_pa(100,1)
g$size
dim(g)
length(g)
length(V(g))
h = smallworld(100)
h$size
h = smallworld(1,100,50,0.1)
h$size
h = sample_smallworld(1,100,50,0.1)
h$size
shiny::runApp('IFEMA/feriaCiencia')
setwd("~/GitHub/Coronasurveys_paper/Survey size")
library(dplyr)
library(matrixStats)
library(ggplot2)
library(stringr)
#simulation_data  = read.csv("~/GitHub/CoronaSurveys_Simulations/R programs/Disjoint and no disjoint ensemble/Simulations and csv analysis/Survey size/CSV/Simulation_surveysize_notdisjoint_207.csv")
#simulation_data_disjoint  =  read.csv("~/GitHub/CoronaSurveys_Simulations/R programs/Disjoint and no disjoint ensemble/Simulations and csv analysis/Survey size/CSV/Simulation_surveysize_disjoint_207.csv")
simulation_data  = read.csv("~/GitHub/Coronasurveys_paper/Survey size/CSV/Simulation_surveysize_notdisjoint_uniform_pa_2022.csv")
simulation_data_disjoint  =  read.csv("~/GitHub/Coronasurveys_paper/Survey size/CSV/Simulation_surveysize_disjoint_uniform_pa_2022.csv")
#simulation_data  = read.csv("~/GitHub/CoronaSurveys_Simulations/R programs/Disjoint and no disjoint ensemble/Simulations and csv analysis/Survey size/CSV/Simulation_surveysize_notdisjoint_207.csv")
#simulation_data_disjoint  =  read.csv("~/GitHub/CoronaSurveys_Simulations/R programs/Disjoint and no disjoint ensemble/Simulations and csv analysis/Survey size/CSV/Simulation_surveysize_disjoint_207.csv")
simulation_data  = read.csv("~/GitHub/Coronasurveys_paper/Survey size/CSV/Simulation_surveysize_notdisjoint_uniform_pa_pop1_2022.csv")
simulation_data_disjoint  =  read.csv("~/GitHub/Coronasurveys_paper/Survey size/CSV/Simulation_surveysize_disjoint_uniform_pa_pop1_2022.csv")
Nh_real_dataframe = dplyr::select(simulation_data, starts_with("Nh_real"))
Nh_basic_sum_dataframe = dplyr::select(simulation_data, starts_with("Nh_basic_sum"))
#Nh_basicvis_sum_dataframe = dplyr::select(simulation_data, starts_with("Nh_basicvis_sum"))
Nh_basic_mean_dataframe = dplyr::select(simulation_data, starts_with("Nh_basic_mean"))
#Nh_basicvis_mean_dataframe = dplyr::select(simulation_data, starts_with("Nh_basicvis_mean"))
Nh_PIMLE_dataframe    = dplyr::select(simulation_data, starts_with("Nh_PIMLE_"))
#Nh_PIMLEvis_dataframe = dplyr::select(simulation_data, starts_with("Nh_PIMLEvis_"))
Nh_MLE_dataframe     = dplyr::select(simulation_data, starts_with("Nh_MLE_") & !contains("mod"))
#Nh_MLEvis_dataframe  = dplyr::select(simulation_data, starts_with("Nh_MLEvis_"))
Nh_MLE_mod_dataframe     = dplyr::select(simulation_data, starts_with("Nh_MLE_") & contains("mod"))
#Nh_MLEvis_dataframe  = dplyr::select(simulation_data, starts_with("Nh_MLEvis_"))
Nh_MoS_dataframe     = dplyr::select(simulation_data, starts_with("Nh_MoS_"))
#Nh_MoSvis_dataframe  = dplyr::select(simulation_data, starts_with("Nh_MoSvis_"))
Nh_GNSUM_dataframe   = dplyr::select(simulation_data, starts_with("Nh_GNSUM"))
######### Data analysis ##########
# This way of presenting the data allows us to carry out a more detailed analysis
# of each estimator.
Nh_basic_sum_analysis      = data_analysis(Nh_basic_sum_dataframe, Nh_real_dataframe)
source("~/GitHub/Coronasurveys_paper/Functions script.R")
plotSurveySize("abserror")
plotSurveySize = function(method){
graph_data = data.frame(data = simulation_data$data)
graph_data = cbind(graph_data, Nh_basic_sum =  Nh_basic_sum_analysis[[method]])
#graph_data = cbind(graph_data, Nh_basicvis_sum =  Nh_basicvis_sum_analysis[[method]])
graph_data = cbind(graph_data, Nh_basic_mean =  Nh_basic_mean_analysis[[method]])
#graph_data = cbind(graph_data, Nh_basicvis_mean =  Nh_basicvis_mean_analysis[[method]])
graph_data = cbind(graph_data, Nh_PIMLE =  Nh_PIMLE_analysis[[method]])
#graph_data = cbind(graph_data, Nh_PIMLEvis =  Nh_PIMLEvis_analysis[[method]])
graph_data = cbind(graph_data, Nh_MLE =  Nh_MLE_analysis[[method]])
#graph_data = cbind(graph_data, Nh_MLEvis =  Nh_MLEvis_analysis[[method]])
graph_data = cbind(graph_data, Nh_MLE_mod =  Nh_MLE_mod_analysis[[method]])
#graph_data = cbind(graph_data, Nh_MLEvis =  Nh_MLEvis_analysis[[method]])
graph_data = cbind(graph_data, Nh_MoS =  Nh_MoS_analysis[[method]])
#graph_data = cbind(graph_data, Nh_MoSvis =  Nh_MoSvis_analysis[[method]])
graph_data = cbind(graph_data, Nh_GNSUM  =  Nh_GNSUM_analysis[[method]])
# Graph creation
plot_name = str_c("Simulation_surveysize_", seed_number, "_notdisjoint_",method,".png")
sub_title = str_c("Not disjoint populations plot, seed ", seed_number)
# png(filename = plot_name,
#     width = 1000, height = 600)
p = ggplot(graph_data) +
geom_line(aes(x = data, y =  Nh_basic_sum, col = "Nh_basic_sum")) +
#geom_line(aes(x = data, y =  Nh_basicvis_sum, col = "Nh_basicvis_sum")) +
geom_line(aes(x = data, y =  Nh_basic_mean, col = "Nh_basic_mean")) +
#geom_line(aes(x = data, y =  Nh_basicvis_mean, col = "Nh_basicvis_mean")) +
#geom_line(aes(x = data, y =  Nh_PIMLEvis, col = "Nh_PIMLEvis")) +
geom_line(aes(x = data, y =  Nh_PIMLE, col = "Nh_PIMLE")) +
geom_line(aes(x = data, y =  Nh_MLE, col = "Nh_MLE")) +
#geom_line(aes(x = data, y =  Nh_MLEvis, col = "Nh_MLEvis")) +
geom_line(aes(x = data, y =  Nh_MLE_mod, col = "Nh_MLE_mod")) +
#geom_line(aes(x = data, y =  Nh_MLEvis, col = "Nh_MLEvis")) +
geom_line(aes(x = data, y =  Nh_MoS, col = "Nh_MoS")) +
#geom_line(aes(x = data, y =  Nh_MoSvis, col = "Nh_MoSvis")) +
geom_line(aes(x = data, y =  Nh_GNSUM, col = "Nh_GNSUM")) +
scale_color_discrete("Legend") +
labs(title = "Simulations based on the survey size",
subtitle = sub_title,
x = "Survey size",
y = "Mean Absolute Error")
ggsave(plot_name, plot = p)
# dev.off()
}
plotSurveySize("abserror")
Nh_basic_sum_analysis      = data_analysis(Nh_basic_sum_dataframe, Nh_real_dataframe)
plotSurveySize("abserror")
method = "abserror"
graph_data = data.frame(data = simulation_data$data)
graph_data = cbind(graph_data, Nh_basic_sum =  Nh_basic_sum_analysis[[method]])
graph_data = cbind(graph_data, Nh_basic_mean =  Nh_basic_mean_analysis[[method]])
graph_data = cbind(graph_data, Nh_PIMLE =  Nh_PIMLE_analysis[[method]])
Nh_PIMLE_analysis     = data_analysis(Nh_PIMLE_dataframe, Nh_real_dataframe)
Nh_PIMLE_analysis
Nh_PIMLE_analysis[[method]]
graph_data = data.frame(data = simulation_data$data)
graph_data
graph_data = cbind(graph_data, Nh_basic_sum =  Nh_basic_sum_analysis[[method]])
graph_data
graph_data = cbind(graph_data, Nh_basic_mean =  Nh_basic_mean_analysis[[method]])
Nh_basic_mean_analysis
Nh_basic_mean_analysis
source("~/GitHub/Coronasurveys_paper/Survey size/Scripts/Graph_surveysize_v2.R")
seed_number = "207"
source("~/GitHub/Coronasurveys_paper/Survey size/Scripts/Graph_surveysize_v2.R")
getwd()
source("~/GitHub/Coronasurveys_paper/Survey size/Scripts/Graph_surveysize_v2.R")
notdisj_path
"~/GitHub/Coronasurveys_paper/Survey size/CSV/Simulation_surveysize_notdisjoint_uniform_pa_pop1_2022.csv"
source("~/GitHub/Coronasurveys_paper/Survey size/Scripts/Graph_surveysize_v2.R")
graph_data
Nh_GNSUM_analysis
colnames(Nh_GNSUM_analysis)
#simulation_data  = read.csv("~/GitHub/CoronaSurveys_Simulations/R programs/Disjoint and no disjoint ensemble/Simulations and csv analysis/Survey size/CSV/Simulation_surveysize_notdisjoint_207.csv")
#simulation_data_disjoint  =  read.csv("~/GitHub/CoronaSurveys_Simulations/R programs/Disjoint and no disjoint ensemble/Simulations and csv analysis/Survey size/CSV/Simulation_surveysize_disjoint_207.csv")
simulation_data  = read.csv("~/GitHub/Coronasurveys_paper/Survey size/CSV/Simulation_surveysize_notdisjoint_uniform_pa_pop1_2022.csv")
simulation_data_disjoint  =  read.csv("~/GitHub/Coronasurveys_paper/Survey size/CSV/Simulation_surveysize_disjoint_uniform_pa_pop1_2022.csv")
Nh_real_dataframe = dplyr::select(simulation_data, starts_with("Nh_real"))
Nh_basic_sum_dataframe = dplyr::select(simulation_data, starts_with("Nh_basic_sum"))
Nh_basic_mean_dataframe = dplyr::select(simulation_data, starts_with("Nh_basic_mean"))
Nh_PIMLE_dataframe    = dplyr::select(simulation_data, starts_with("Nh_PIMLE_"))
Nh_MLE_dataframe     = dplyr::select(simulation_data, starts_with("Nh_MLE_") & !contains("mod"))
Nh_MLE_mod_dataframe     = dplyr::select(simulation_data, starts_with("Nh_MLE_") & contains("mod"))
Nh_MoS_dataframe     = dplyr::select(simulation_data, starts_with("Nh_MoS_"))
Nh_GNSUM_dataframe   = dplyr::select(simulation_data, starts_with("Nh_GNSUM"))
Nh_basic_sum_analysis      = data_analysis(Nh_basic_sum_dataframe, Nh_real_dataframe)
Nh_basic_mean_analysis     = data_analysis(Nh_basic_mean_dataframe, Nh_real_dataframe)
Nh_PIMLE_analysis     = data_analysis(Nh_PIMLE_dataframe, Nh_real_dataframe)
Nh_MLE_analysis     = data_analysis(Nh_MLE_dataframe, Nh_real_dataframe)
Nh_MLE_mod_analysis     = data_analysis(Nh_MLE_mod_dataframe, Nh_real_dataframe)
Nh_MoS_analysis     = data_analysis(Nh_MoS_dataframe, Nh_real_dataframe)
Nh_GNSUM_analysis  = data_analysis(Nh_GNSUM_dataframe, Nh_real_dataframe)
Nh_real_dataframe_disjoint = dplyr::select(simulation_data_disjoint, starts_with("Nh_real"))
Nh_basic_sum_dataframe_disjoint = dplyr::select(simulation_data_disjoint, starts_with("Nh_basic_sum"))
Nh_basic_mean_dataframe_disjoint = dplyr::select(simulation_data_disjoint, starts_with("Nh_basic_mean"))
Nh_PIMLE_dataframe_disjoint    = dplyr::select(simulation_data_disjoint, starts_with("Nh_PIMLE_"))
Nh_MLE_dataframe_disjoint     = dplyr::select(simulation_data_disjoint, starts_with("Nh_MLE_") & !contains("mod"))
Nh_MLE_mod_dataframe_disjoint     = dplyr::select(simulation_data_disjoint, starts_with("Nh_MLE_") & contains("mod"))
Nh_MoS_dataframe_disjoint     = dplyr::select(simulation_data_disjoint, starts_with("Nh_MoS_"))
Nh_GNSUM_dataframe_disjoint  = dplyr::select(simulation_data_disjoint, starts_with("Nh_GNSUM"))
Nh_basic_sum_analysis_disjoint      = data_analysis(Nh_basic_sum_dataframe_disjoint, Nh_real_dataframe)
Nh_basic_mean_analysis_disjoint     = data_analysis(Nh_basic_mean_dataframe_disjoint, Nh_real_dataframe)
Nh_PIMLE_analysis_disjoint     = data_analysis(Nh_PIMLE_dataframe_disjoint, Nh_real_dataframe)
Nh_MLE_analysis_disjoint     = data_analysis(Nh_MLE_dataframe_disjoint, Nh_real_dataframe)
Nh_MLE_mod_analysis_disjoint     = data_analysis(Nh_MLE_mod_dataframe_disjoint, Nh_real_dataframe)
Nh_MoS_analysis_disjoint     = data_analysis(Nh_MoS_dataframe_disjoint, Nh_real_dataframe)
Nh_GNSUM_analysis_disjoint   = data_analysis(Nh_GNSUM_dataframe_disjoint, Nh_real_dataframe)
plotSurveySize = function(method){
graph_data = data.frame(data = simulation_data$data)
graph_data = cbind(graph_data, Nh_basic_sum =  Nh_basic_sum_analysis[[method]])
#graph_data = cbind(graph_data, Nh_basicvis_sum =  Nh_basicvis_sum_analysis[[method]])
graph_data = cbind(graph_data, Nh_basic_mean =  Nh_basic_mean_analysis[[method]])
#graph_data = cbind(graph_data, Nh_basicvis_mean =  Nh_basicvis_mean_analysis[[method]])
graph_data = cbind(graph_data, Nh_PIMLE =  Nh_PIMLE_analysis[[method]])
#graph_data = cbind(graph_data, Nh_PIMLEvis =  Nh_PIMLEvis_analysis[[method]])
graph_data = cbind(graph_data, Nh_MLE =  Nh_MLE_analysis[[method]])
#graph_data = cbind(graph_data, Nh_MLEvis =  Nh_MLEvis_analysis[[method]])
graph_data = cbind(graph_data, Nh_MLE_mod =  Nh_MLE_mod_analysis[[method]])
#graph_data = cbind(graph_data, Nh_MLEvis =  Nh_MLEvis_analysis[[method]])
graph_data = cbind(graph_data, Nh_MoS =  Nh_MoS_analysis[[method]])
#graph_data = cbind(graph_data, Nh_MoSvis =  Nh_MoSvis_analysis[[method]])
graph_data = cbind(graph_data, Nh_GNSUM  =  Nh_GNSUM_analysis[[method]])
# Graph creation
plot_name = str_c("Simulation_surveysize_", seed_number, "_notdisjoint_",hid_distrib,'_',network,'_',
population,'_2022',method,".png")
sub_title = str_c("Not disjoint populations plot, seed ", seed_number)
# png(filename = plot_name,
#     width = 1000, height = 600)
p = ggplot(graph_data) +
geom_line(aes(x = data, y =  Nh_basic_sum, col = "Nh_basic_sum")) +
#geom_line(aes(x = data, y =  Nh_basicvis_sum, col = "Nh_basicvis_sum")) +
geom_line(aes(x = data, y =  Nh_basic_mean, col = "Nh_basic_mean")) +
#geom_line(aes(x = data, y =  Nh_basicvis_mean, col = "Nh_basicvis_mean")) +
#geom_line(aes(x = data, y =  Nh_PIMLEvis, col = "Nh_PIMLEvis")) +
geom_line(aes(x = data, y =  Nh_PIMLE, col = "Nh_PIMLE")) +
geom_line(aes(x = data, y =  Nh_MLE, col = "Nh_MLE")) +
#geom_line(aes(x = data, y =  Nh_MLEvis, col = "Nh_MLEvis")) +
geom_line(aes(x = data, y =  Nh_MLE_mod, col = "Nh_MLE_mod")) +
#geom_line(aes(x = data, y =  Nh_MLEvis, col = "Nh_MLEvis")) +
geom_line(aes(x = data, y =  Nh_MoS, col = "Nh_MoS")) +
#geom_line(aes(x = data, y =  Nh_MoSvis, col = "Nh_MoSvis")) +
geom_line(aes(x = data, y =  Nh_GNSUM, col = "Nh_GNSUM")) +
scale_color_discrete("Legend") +
labs(title = "Simulations based on the survey size",
subtitle = sub_title,
x = "Survey size",
y = "Mean Absolute Error")
ggsave(plot_name, plot = p)
# dev.off()
}
plotSurveySize("abserror")
source("~/GitHub/Coronasurveys_paper/Survey size/Scripts/Graph_surveysize_v2.R")
method = "mse"
graph_data = data.frame(data = simulation_data$data)
graph_data = cbind(graph_data, Nh_basic_sum =  Nh_basic_sum_analysis[[method]])
graph_data = cbind(graph_data, Nh_basic_mean =  Nh_basic_mean_analysis[[method]])
graph_data = cbind(graph_data, Nh_PIMLE =  Nh_PIMLE_analysis[[method]])
graph_data = cbind(graph_data, Nh_MLE =  Nh_MLE_analysis[[method]])
graph_data = cbind(graph_data, Nh_MLE_mod =  Nh_MLE_mod_analysis[[method]])
graph_data = cbind(graph_data, Nh_MoS =  Nh_MoS_analysis[[method]])
graph_data = cbind(graph_data, Nh_GNSUM  =  Nh_GNSUM_analysis[[method]])
graph_data
Nh_basic_sum_analysis_disjoint$mse
plotSurveySize("mse")
Nh_basic_sum_analysis_disjoint$sd
Nh_PIMLE_analysis
N = 1000
# Study parameters
parameters    = round(seq(from = 10, to = N, length.out = 10))
parameters
# Network
#net_model = sample_smallworld(dim, N, nei, p, loops = FALSE, multiple = FALSE)
net_model = sample_pa(N,1,m=m,directed = FALSE)
m=50
# Network
#net_model = sample_smallworld(dim, N, nei, p, loops = FALSE, multiple = FALSE)
net_model = sample_pa(N,1,m=m,directed = FALSE)
mean(degree(net_model))
plotSurveySize = function(method, method_plot_name){
graph_data = data.frame(data = simulation_data$data)
graph_data = cbind(graph_data, Nh_basic_sum =  Nh_basic_sum_analysis[[method]])
#graph_data = cbind(graph_data, Nh_basicvis_sum =  Nh_basicvis_sum_analysis[[method]])
graph_data = cbind(graph_data, Nh_basic_mean =  Nh_basic_mean_analysis[[method]])
#graph_data = cbind(graph_data, Nh_basicvis_mean =  Nh_basicvis_mean_analysis[[method]])
graph_data = cbind(graph_data, Nh_PIMLE =  Nh_PIMLE_analysis[[method]])
#graph_data = cbind(graph_data, Nh_PIMLEvis =  Nh_PIMLEvis_analysis[[method]])
graph_data = cbind(graph_data, Nh_MLE =  Nh_MLE_analysis[[method]])
#graph_data = cbind(graph_data, Nh_MLEvis =  Nh_MLEvis_analysis[[method]])
graph_data = cbind(graph_data, Nh_MLE_mod =  Nh_MLE_mod_analysis[[method]])
#graph_data = cbind(graph_data, Nh_MLEvis =  Nh_MLEvis_analysis[[method]])
graph_data = cbind(graph_data, Nh_MoS =  Nh_MoS_analysis[[method]])
#graph_data = cbind(graph_data, Nh_MoSvis =  Nh_MoSvis_analysis[[method]])
graph_data = cbind(graph_data, Nh_GNSUM  =  Nh_GNSUM_analysis[[method]])
# Graph creation
plot_name = str_c("Simulation_surveysize_", seed_number, "_notdisjoint_",hid_distrib,'_',network,'_',
population,'_2022',method,".png")
sub_title = str_c("Not disjoint populations plot, seed ", seed_number)
# png(filename = plot_name,
#     width = 1000, height = 600)
p = ggplot(graph_data) +
geom_line(aes(x = data, y =  Nh_basic_sum, col = "Nh_basic_sum")) +
#geom_line(aes(x = data, y =  Nh_basicvis_sum, col = "Nh_basicvis_sum")) +
geom_line(aes(x = data, y =  Nh_basic_mean, col = "Nh_basic_mean")) +
#geom_line(aes(x = data, y =  Nh_basicvis_mean, col = "Nh_basicvis_mean")) +
#geom_line(aes(x = data, y =  Nh_PIMLEvis, col = "Nh_PIMLEvis")) +
geom_line(aes(x = data, y =  Nh_PIMLE, col = "Nh_PIMLE")) +
geom_line(aes(x = data, y =  Nh_MLE, col = "Nh_MLE")) +
#geom_line(aes(x = data, y =  Nh_MLEvis, col = "Nh_MLEvis")) +
geom_line(aes(x = data, y =  Nh_MLE_mod, col = "Nh_MLE_mod")) +
#geom_line(aes(x = data, y =  Nh_MLEvis, col = "Nh_MLEvis")) +
geom_line(aes(x = data, y =  Nh_MoS, col = "Nh_MoS")) +
#geom_line(aes(x = data, y =  Nh_MoSvis, col = "Nh_MoSvis")) +
geom_line(aes(x = data, y =  Nh_GNSUM, col = "Nh_GNSUM")) +
scale_color_discrete("Legend") +
labs(title = "Simulations based on the survey size",
subtitle = sub_title,
x = "Survey size",
y = method_plot_name)
ggsave(plot_name, plot = p)
# dev.off()
}
plotSurveySize("abserror")
y_names = c("Absolute Error", " Mean Absolute Error", "Bias", "Standard Deviation", "Median")
method_code = c("abserror", "mse"   ,   "bias"    , "sd"    ,   "median")
for (i in 1:length(y_names)) {
plotSurveySize(method_code[i],y_names[i])
}
