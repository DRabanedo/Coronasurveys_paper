# Start from the node you have chosen
chosen_node = 1
infected_nodes = c(infected_nodes,chosen_node)
n_timesteps = 1000
for (i in 1:n_timesteps) {
#Infection stage
for (node in infected_nodes) {
for (neighbor in net[[node]][[1]]){
if (runif(1) < beta & !(neighbor %in% infected_nodes) & !(neighbor %in% infected_recovered )) {
infected_nodes = c(infected_nodes,neighbor)
#print(infected_nodes)
}
}
}
# Removal stage
infected_survivors = c()
for (node in infected_nodes) {
if (runif(1) < gamma){
infected_recovered = c(infected_recovered,node)
}
else{
infected_survivors = c(infected_survivors,node)
}
}
infected_nodes = infected_survivors
}
infected_nodes
infected_nodes = c()
infected_recovered = c()
# Set the infection rate
beta = 0.1
# Set the removal rate
gamma = 0.01
# Set how many timesteps you want to pass through
n_timesteps = 1
# Start from the node you have chosen
chosen_node = 1
infected_nodes = c(infected_nodes,chosen_node)
n_timesteps = 1000
for (i in 1:n_timesteps) {
#Infection stage
for (node in infected_nodes) {
for (neighbor in net[[node]][[1]]){
if (runif(1) < beta & !(neighbor %in% infected_nodes) & !(neighbor %in% infected_recovered )) {
infected_nodes = c(infected_nodes,neighbor)
#print(infected_nodes)
}
}
}
# Removal stage
infected_survivors = c()
for (node in infected_nodes) {
if (runif(1) < gamma){
infected_recovered = c(infected_recovered,node)
}
else{
infected_survivors = c(infected_survivors,node)
}
}
infected_nodes = infected_survivors
}
infected_nodes
infected_nodes = c()
infected_recovered = c()
# Set the infection rate
beta = 0.1
# Set the removal rate
gamma = 0.01
# Set how many timesteps you want to pass through
n_timesteps = 1
# Start from the node you have chosen
chosen_node = 1
infected_nodes = c(infected_nodes,chosen_node)
n_timesteps = 1000
#Infection stage
for (node in infected_nodes) {
for (neighbor in net[[node]][[1]]){
if (runif(1) < beta & !(neighbor %in% infected_nodes) & !(neighbor %in% infected_recovered )) {
infected_nodes = c(infected_nodes,neighbor)
#print(infected_nodes)
}
}
}
# Removal stage
infected_survivors = c()
for (node in infected_nodes) {
if (runif(1) < gamma){
infected_recovered = c(infected_recovered,node)
}
else{
infected_survivors = c(infected_survivors,node)
}
}
infected_nodes = infected_survivors
for (neighbor in net[[node]][[1]]){
if (runif(1) < beta & !(neighbor %in% infected_nodes) & !(neighbor %in% infected_recovered )) {
infected_nodes = c(infected_nodes,neighbor)
#print(infected_nodes)
}
}
infected_nodes
infected_nodes = c()
infected_recovered = c()
# Set the infection rate
beta = 0.1
# Set the removal rate
gamma = 0.01
# Set how many timesteps you want to pass through
n_timesteps = 1
# Start from the node you have chosen
chosen_node = 1
infected_nodes = c(infected_nodes,chosen_node)
n_timesteps = 1000
for (i in 1:n_timesteps) {
#Infection stage
for (node in infected_nodes) {
for (neighbor in net[[node]][[1]]){
if (runif(1) < beta & !(neighbor %in% infected_nodes) & !(neighbor %in% infected_recovered )) {
infected_nodes = c(infected_nodes,neighbor)
#print(infected_nodes)
}
}
}
# Removal stage
infected_survivors = c()
for (node in infected_nodes) {
if (runif(1) < gamma){
infected_recovered = c(infected_recovered,node)
}
else{
infected_survivors = c(infected_survivors,node)
}
}
infected_nodes = infected_survivors
}
infected_nodes
infected_nodes = c()
infected_recovered = c()
# Set the infection rate
beta = 0.1
# Set the removal rate
gamma = 0.01
# Set how many timesteps you want to pass through
n_timesteps = 1
# Start from the node you have chosen
chosen_node = 1
infected_nodes = c(infected_nodes,chosen_node)
n_timesteps = 1000
#Infection stage
for (node in infected_nodes) {
for (neighbor in net[[node]][[1]]){
if (runif(1) < beta & !(neighbor %in% infected_nodes) & !(neighbor %in% infected_recovered )) {
infected_nodes = c(infected_nodes,neighbor)
#print(infected_nodes)
}
}
}
# Removal stage
infected_survivors = c()
for (node in infected_nodes) {
if (runif(1) < gamma){
infected_recovered = c(infected_recovered,node)
}
else{
infected_survivors = c(infected_survivors,node)
}
}
infected_nodes = infected_survivors
infected_nodes
dim=1
nei=15
p=0.1
N=100
net = sample_smallworld(dim, N, nei, p, loops = FALSE, multiple = FALSE)
infected_nodes = c()
infected_recovered = c()
# Set the infection rate
beta = 0.1
# Set the removal rate
gamma = 0.01
# Set how many timesteps you want to pass through
n_timesteps = 20
# Start from the node you have chosen
chosen_node = 1
infected_nodes = c(infected_nodes,chosen_node)
for (i in 1:n_timesteps) {
#Infection stage
for (node in infected_nodes) {
for (neighbor in net[[node]][[1]]){
if (runif(1) < beta & !(neighbor %in% infected_nodes) & !(neighbor %in% infected_recovered )) {
infected_nodes = c(infected_nodes,neighbor)
#print(infected_nodes)
}
}
}
# Removal stage
infected_survivors = c()
for (node in infected_nodes) {
if (runif(1) < gamma){
infected_recovered = c(infected_recovered,node)
}
else{
infected_survivors = c(infected_survivors,node)
}
}
infected_nodes = infected_survivors
}
infected_nodes
infected_recovered
library(igraph)    #
library(stringr)   #
library(ggplot2)   #
####################
# Seed #
seed = 207
set.seed(seed)
getwd()
# Network #
size = 10000
nei = 25
links = c(rep(5,500), rep(5,500), rep(5,500), rep(5,500), rep(5,500), rep(30,500), rep(40,500), rep(50,500), rep(60,500), rep(70,500), rep(80,500), rep(90,500),
rep(100,500), rep(110,500), rep(120,500), rep(130,500), rep(150,500), rep(160,500), rep(170,500), rep(180,500) )
length(links)
# Loop #
iterations = 1
p_iter = 0.1
degree_df = data.frame(row.names = c(1:(iterations*size)))
degree_vect = c()
degree_loop = rep(NA, size)
for (i in 1:iterations){
network = sample_pa(n = size, out.seq = links, directed = FALSE, algorithm = 'psumtree')
for (j in 1:size){
degree_loop[j] = length(network[[j]][[1]])
}
degree_vect = append(degree_vect, degree_loop)
}
degree_summary =  degree_vect
degree_var = round(var(degree_summary), digits = 2)
degree_median = median(degree_summary)
degree_max = max(degree_summary)
degree_min = min(degree_summary)
sub_title = str_c("Probability = ", p_iter, ", median = ", degree_median, ", var = ", degree_var,", min = ", degree_min, ", max = ", degree_max, ". Small World model")
plot_name = str_c("Smallword_", p_iter,".png")
degree_df = data.frame(simple = degree_vect)
degree_graph = ggplot(degree_df) +
geom_histogram( aes(x = simple, y = ..count../sum(..count..)), binwidth = 5, color = "black", fill = "grey", alpha = 0.4) +
labs(title = "Network degree simulation",
subtitle = sub_title,
x = "Number of neighbors",
y = "Proportion")
degree_graph
degree_summary
1 %in% c(1,3,3)
sum(1 %in% c(1,3,3))
as.logical(sum(1 %in% c(1,3,3)))
as.logical(2)
source("~/GitHub/CoronaSurveys_Simulations/R programs/Paper version/Paper functions script.R")
N = 1000                 # Population size
v_pop = c(1:10)           # Subpopulations vector. They are disjoint and 0 corresponds to not classifying the individual in any of them
n_pop = length(v_pop)   # Number of subpopulations
v_pop_prob =  rep(1/length(v_pop), length(v_pop)) #Probability of each subpopulation
hp_prob = 0.1             # Probability for an individual to be in the hidden population (People who have COVID-19)
n_survey = 300            # Number of individuals we draw in the survey
n_survey_hp = 50          # Number of individuals we draw in the hidden population survey
sub_memory_factor = 0     # Subpopulation memory factor (parameter to change variance of the perturbations' normal)
memory_factor = 0         # Reach memory factor (parameter to change variance of the perturbations' normal)
visibility_factor = 1     # Visibility factor (Binomial's probability)
seed = 207                # Seed
set.seed(seed)
#Graph
dim = 1    # Graph dimension
nei = 75   # Number of neighbours that each node is connected to. They are neighbors on each side of the node, so they are 2*nei connections
# before applying the randomization.
p   = 0.1  # Probability of randomize a connection. It is applied to all connections
# Study parameters
parameters = list(rep(1/2, 10), rep(1/4,10), rep(1/8,10), rep(1/16,10), rep(1/32,10), rep(1/100,10),
rep(c(1/2,1/10),5), rep(c(1/5,1/25),5), rep(c(1/4, 1/8, 1/16, 1/32, 1/64),2))
Graph_population_matrix = getData(N, v_pop, v_pop_prob, hp_prob, dim, nei, p, visibility_factor, memory_factor,sub_memory_factor)
Graph_population_matrix = getData(N, v_pop, hp_prob, dim, nei, p, visibility_factor, memory_factor,sub_memory_factor)
Graph_population_matrix = getData(N, v_pop, v_pop_prob, hp_prob, dim, nei, p, visibility_factor, memory_factor,sub_memory_factor)
getData(N,v_pop_prob,hp_prob,dim,nei,p,visibility_factor,memory_factor,sub_memory_factor)
Graph_population_matrix = getData(N,v_pop_prob,hp_prob,dim,nei,p,visibility_factor,memory_factor,sub_memory_factor)
net_sw = Graph_population_matrix[[1]]      # PopulationÂ´s graph
Population = Graph_population_matrix[[2]]  # Population
Mhp_vis = Graph_population_matrix[[3]]
Population[1:4,]
N = 1000                 # Population size
v_pop = c(1:10)           # Subpopulations vector. They are disjoint and 0 corresponds to not classifying the individual in any of them
n_pop = length(v_pop)   # Number of subpopulations
v_pop_prob =  rep(1/length(v_pop), length(v_pop)) #Probability of each subpopulation
hp_prob = 0.1             # Probability for an individual to be in the hidden population (People who have COVID-19)
n_survey = 300            # Number of individuals we draw in the survey
n_survey_hp = 50          # Number of individuals we draw in the hidden population survey
sub_memory_factor = 0     # Subpopulation memory factor (parameter to change variance of the perturbations' normal)
memory_factor = 0         # Reach memory factor (parameter to change variance of the perturbations' normal)
visibility_factor = 1     # Visibility factor (Binomial's probability)
seed = 207                # Seed
set.seed(seed)
#Graph
dim = 1    # Graph dimension
nei = 75   # Number of neighbours that each node is connected to. They are neighbors on each side of the node, so they are 2*nei connections
# before applying the randomization.
p   = 0.1  # Probability of randomize a connection. It is applied to all connections
# Study parameters
parameters = list(rep(1/2, 10), rep(1/4,10), rep(1/8,10), rep(1/16,10), rep(1/32,10), rep(1/100,10),
rep(c(1/2,1/10),5), rep(c(1/5,1/25),5), rep(c(1/4, 1/8, 1/16, 1/32, 1/64),2))
Graph_population_matrix = getData(N, v_pop, v_pop_prob, hp_prob, dim, nei, p, visibility_factor, memory_factor,sub_memory_factor)
net_sw = Graph_population_matrix[[1]]      # PopulationÂ´s graph
Population = Graph_population_matrix[[2]]  # Population
Mhp_vis = Graph_population_matrix[[3]]
source("~/CoronaSurveys_Simulations/R programs/Not disjoint subpopulations/Functions/Functions script.R")
source("~/IBiDat project/surveyGeneration.R")
source("~/IBiDat project/Teo_2019.R")
res = runModel(survey,v_pop_total,100)
res
res$posterior
res$posterior[1,1]
res$posterior[[1]]
res$posterior[,1]
pos = as.matrix(res$posterior)
pos
dim(pos)
pos$Su
pos[,1]
length(pos)
length(pos[,1])
survey
survey[1,]
#knownpopulation_data contains the number of individuals from each subpopulation
popindex = colnames(survey %>% dplyr::select(starts_with("KP")| HP_total_apvis ))
popindex
data0 = survey[,popindex]
data0[1:3,]
indexk = grep("K", colnames(data0))
indexk
indexu = grep("H",colnames(data0))
indexu
dataset=list(
N=dim(data0)[1],
Kk=length(indexk),
nk=data0[,indexk],
Ku=length(indexu),
nu=as.data.frame(x=data0[,indexu],col.names=indexu),
Sk=knowpopulation_data,
#Sk=as.data.frame(knowpopulation_data),
Su=rep(NA,length(indexu)))
dataset=list(
N=dim(data0)[1],
Kk=length(indexk),
nk=data0[,indexk],
Ku=length(indexu),
nu=as.data.frame(x=data0[,indexu],col.names=indexu),
Sk=v_pop_total,
#Sk=as.data.frame(knowpopulation_data),
Su=rep(NA,length(indexu)))
dataset
initialisation=list(lambda=0.1)
jagmod=jags.model(textConnection(model1),data=dataset,inits=initialisation,n.chains=2)
update(jagmod, n.iter=5000, progress.bar="text")
initialisation
posterior = coda.samples(jagmod, c("alpha","lambda","tau","Su"),n.iter=NITERATION,progress.bar="text",thin=10)
NITERATION = 50
posterior = coda.samples(jagmod, c("alpha","lambda","tau","Su"),n.iter=NITERATION,progress.bar="text",thin=10)
posterior
posterior[,1]
posterior = coda.samples(jagmod, c("alpha","lambda","tau","Su"),n.iter=NITERATION,progress.bar="text",thin=1)
posterior
as.matrix(posterior)[,1]
NITERATION
posterior = coda.samples(jagmod, c("alpha","lambda","tau","Su"),n.iter=NITERATION,progress.bar="text",thin=10)
as.matrix(posterior)[,1]
posterior = coda.samples(jagmod, c("alpha","lambda","tau","Su"),n.iter=NITERATION,progress.bar="text",thin=1)
as.matrix(posterior)[,1]
posterior = coda.samples(jagmod, c("alpha","lambda","tau","Su"),n.iter=NITERATION,progress.bar="text",thin=10)
as.matrix(posterior)[,1]
posterior = coda.samples(jagmod, c("alpha","lambda","tau","Su"),n.iter=50,progress.bar="text",thin=10)
as.matrix(posterior)[,1]
posterior = coda.samples(jagmod, c("alpha","lambda","tau","Su"),n.iter=50,progress.bar="text",thin=50)
as.matrix(posterior)[,1]
initialisation=list(lambda=0.1)
jagmod=jags.model(textConnection(model1),data=dataset,inits=initialisation,n.chains=1)
jagmod=jags.model(textConnection(model1),data=dataset,inits=initialisation,n.chains=1)
update(jagmod, n.iter=5000, progress.bar="text")
posterior = coda.samples(jagmod, c("alpha","lambda","tau","Su"),n.iter=NITERATION,progress.bar="text",thin=1)
dicsamples = dic.samples(jagmod,type = "pD",n.iter=20000,thin=1)
initialisation=list(lambda=0.1)
jagmod=jags.model(textConnection(model1),data=dataset,inits=initialisation,n.chains=2)
update(jagmod, n.iter=5000, progress.bar="text")
posterior = coda.samples(jagmod, c("alpha","lambda","tau","Su"),n.iter=NITERATION,progress.bar="text",thin=1)
dicsamples = dic.samples(jagmod,type = "pD",n.iter=20000,thin=1)
results = list(indexk=indexk,indexu=indexu,dataset = dataset,posterior=posterior,dicsamples=dicsamples)
as.matrix(results$posterior)[,1]
NITERATION
initialisation=list(lambda=0.1)
jagmod=jags.model(textConnection(model1),data=dataset,inits=initialisation,n.chains=2)
update(jagmod, n.iter=5000, progress.bar="text")
posterior = coda.samples(jagmod, c("alpha","lambda","tau","Su"),n.iter=NITERATION,progress.bar="text",thin=NITERATION)
posterior
posterior[[1]]
posterior[[1]][,1]
posterior[[1]][1,1]
posterior[[1]][2,1]
as.matrix(posterior[[1]])
dicsamples = dic.samples(jagmod,type = "pD",n.iter=20000,thin=NITERATION)
results = list(indexk=indexk,indexu=indexu,dataset = dataset,posterior=posterior,dicsamples=dicsamples)
as.matrix(results$posterior)[,1]
results$posterior[[1]]
dim(results$posterior)
dim(results$posterior[[1]])
initialisation=list(lambda=0.1)
jagmod=jags.model(textConnection(modelTeo),data=dataset,inits=initialisation,n.chains=2)
pos
pos[[1]]
initialisation=list(lambda=0.1)
jagmod=jags.model(textConnection(model1),data=dataset,inits=initialisation,n.chains=2)
update(jagmod, n.iter=5000, progress.bar="text")
posterior = coda.samples(jagmod, c("alpha","lambda","tau","Su"),n.iter=NITERATION,progress.bar="text",thin=1)
dicsamples = dic.samples(jagmod,type = "pD",n.iter=20000,thin=1)
results = list(indexk=indexk,indexu=indexu,dataset = dataset,posterior=posterior,dicsamples=dicsamples)
results$posterior
results$posterior[[1]]
length(results$posterior[[1]])
length(results$posterior[[1]][,1])
NITERATION
as.matrix(results$posterior[[1]])[,1]
mean(as.matrix(results$posterior[[1]])[,1])
source("~/GitHub/CoronaSurveys_Simulations/R programs/Paper version/Paper functions script.R")
# Teo et al. (2019) model
#########################
library(rjags)
##### Packages #####
library(igraph)    #
library(stringr)   #
library(ggplot2)   #
# Seed #
seed = 207
set.seed(seed)
# Network #
dim = 1
size = 10000
nei = 75
loops = FALSE
multiple = FALSE
# Loop #
iterations = 1
p_iter = 0.1
degree_df = data.frame(row.names = c(1:(iterations*size)))
degree_vect = c()
degree_loop = rep(NA, size)
# Degree calculation #
for (h in 1:length(p_iter)){
# Variable reset #
degree_vect = c()
degree_loop = rep(NA, size)
for (i in 1:iterations){
network = sample_smallworld(dim, size, nei, p = p_iter[h], loops, multiple)
for (j in 1:size){
degree_loop[j] = length(network[[j]][[1]])
}
degree_vect = append(degree_vect, degree_loop)
}
degree_df = cbind(degree_df, Probability = degree_vect)
names(degree_df)[dim(degree_df)[2]] = str_c("Probability_", p_iter[h])
}
getwd()
degree_summary =  degree_df$Probability_0.1
degree_var = round(var(degree_summary), digits = 2)
degree_median = median(degree_summary)
degree_max = max(degree_summary)
degree_min = min(degree_summary)
sub_title = str_c("Probability = ", p_iter, ", median = ", degree_median, ", var = ", degree_var,", min = ", degree_min, ", max = ", degree_max, ". Small World model")
plot_name = str_c("Smallword_", p_iter,".png")
degree_graph = ggplot(degree_df) +
geom_histogram( aes(x = Probability_0.1, y = ..count../sum(..count..)), binwidth = 1, color = "black", fill = "grey", alpha = 0.4) +
#geom_histogram( aes(x = Probability_0.5, y=..count../sum(..count..)), binwidth = 2, color = "red", fill = "red", alpha = 0.2) +
#geom_histogram( aes(x = Probability_0.75, y=..count../sum(..count..)), binwidth = 2, color = "blue", fill = "blue", alpha = 0.2) +
#geom_histogram( aes(x = Probability_1, y=..count../sum(..count..)), binwidth = 2, color = "yellow", fill = "yellow", alpha = 0.2) +
labs(title = "Network degree simulation",
subtitle = sub_title,
x = "Number of neighbors",
y = "Proportion")
degree_graph
source("~/GitHub/CoronaSurveys_Simulations/Simulaciones pendientes (Uniforme)/Paper functions script uniform.R")
source("~/GitHub/CoronaSurveys_Simulations/Simulaciones pendientes (Uniforme)/Paper functions script uniform.R")
vect = 1:10
for (i in vect) {
vect = c(vect,i)
}
vect
load("~/CoronaSurveys_Simulations/Archivos R/Estimators/Maltiel, R. and Baraff, A. J. (2015). NSUM/NSUM/data/Curitiba.RData")
View(Curitiba)
View(Curitiba)
View(Curitiba)
Curitiba$unknown
Curitiba$unknown/Curitiba$N
get.seed()
.Random.seed
get.seed(.Random.seed)
runif(5,0,1)
set.seed(.Random.seed)
runif(5,0,1)
set.seed(.Random.seed)
runif(5,0,1)
install.packages("C:/Users/Sergio Diaz/Downloads/NSUM_1.0.tar.gz", repos = NULL, type = "source")
y
N=
0
# Population size
N = 10000
seq(from = 10, to = N, length.out = 10)
setwd("~/GitHub/Coronasurveys_paper/Memory factor/Graphs")
getwd()
